@page "/catalog/{categoryId}"

@using System.Globalization
@using WoodArtCons.Interfaces
@using WoodArtCons.Shared.DataTransferObjects
@inject ICategoryManagerService categoryManager
@inject ICategoryProductManagerService categoryProduct
@inject IJSRuntime JSRuntime

<div style="z-index:-1; position:fixed; width:100vw; left: 0; top: 0; height:100vh;background-image: url('/Images/background1.jpg'); background-size: cover; background-repeat: no-repeat; min-width:300px; min-height:100px;"></div>

@if (isLoading)
{
    <MudProgressCircular Color="Color.Secondary" Style="height:100px; width:100px; position:fixed; top:40%; left:50%;" Indeterminate="true" />
}
else
{
<div class="page-item">
    <div class="d-flex justify-content-center">
            @if(category != null) {
                var categoryName = culture switch { "ru-RU" => category.NameRu, "en-US" => category.NameEn, "ro-RO" => category.NameRo };
                <h1 style="color:white;">@categoryName</h1>
            }
    </div>
        <MudCard Elevation="0" Outlined="false" Class="w-100 d-flex flex-wrap flex-row gap-16 justify-center" Style=" background: transparent;">
            <MudCard Elevation="0" Outlined="false" Style="max-width:1126px; background: transparent;" Class="w-100 d-flex flex-wrap flex-row justify-center">
            @if (culture != null ){
                @if (categoryId == "street-benches" && productsLength1_6 != null && productsLength2 != null)
                {
                    @if (productsLength1_6.Any())
                    {
                        <div class="text-center my-4">
                            <h3 style="color:white;">@LengthText 1.6 @Meters</h3>
                        </div>

                            <MudCard Elevation="0" Outlined="false" Class="w-100 d-flex flex-wrap flex-row  gap-8 justify-center" Style=" background: transparent;">
                            @foreach (var product in productsLength1_6)
                            {
                                var productName = culture switch
                                {
                                    "ru-RU" => product.NameRu,
                                    "en-US" => product.NameEn,
                                    "ro-RO" => product.NameRo
                                };

                                <MudLink Href="@($"/catalog/{product.CategoryId}/{product.Id}")" Underline="Underline.None">
                                    <MudPaper Class="pa-4 d-flex flex-column containerHover">
                                            <MudImage Height="145" Width="200" ObjectPosition="ObjectPosition.Center" Src="@product.ImageSrc" />
                                        <br />
                                        <MudText Align="Align.Left"><b>@Price</b>: @product.Price</MudText>
                                        <MudText Style="overflow-wrap:break-word;max-width:200px;" Typo="Typo.h6" Align="Align.Center">@productName</MudText>
                                    </MudPaper>
                                </MudLink>
                            }
                        </MudCard>
                    }

                    @if (productsLength2.Any())
                    {
                        <div class="text-center my-4 pt-8">
                                <h3 style="color:white;">@LengthText 2 @Meters</h3>
                        </div>

                            <MudCard Elevation="0" Outlined="false" Class="w-100 d-flex flex-wrap flex-row  gap-8 justify-center" Style=" background: transparent;">
                            @foreach (var product in productsLength2)
                            {
                                var productName = culture switch
                                {
                                    "ru-RU" => product.NameRu,
                                    "en-US" => product.NameEn,
                                    "ro-RO" => product.NameRo
                                };

                                <MudLink Href="@($"/catalog/{product.CategoryId}/{product.Id}")" Underline="Underline.None">
                                    <MudPaper Class="pa-4 d-flex flex-column containerHover">
                                            <MudImage Height="145" Width="200" ObjectPosition="ObjectPosition.Center" Src="@product.ImageSrc" />
                                        <br/>
                                        <MudText Align="Align.Left"><b>@Price</b>: @product.Price</MudText>
                                        <MudText Style="overflow-wrap:break-word;max-width:200px;" Typo="Typo.h6" Align="Align.Center">@productName</MudText>
                                    </MudPaper>
                                </MudLink>
                            }
                        </MudCard>
                    }
                }
                else
                {
                    @foreach (var product in products)
                    {
                        var productName = culture switch
                        {
                            "ru-RU" => product.NameRu,
                            "en-US" => product.NameEn,
                            "ro-RO" => product.NameRo
                        };
                        <MudLink Href="@($"/catalog/{product.CategoryId}/{product.Id}")" Underline="Underline.None">
                            <MudPaper Class="pa-4 d-flex flex-column containerHover">
                                    <MudImage Height="145" Width="200" ObjectPosition="ObjectPosition.Center" Src="@product.ImageSrc" />
                                <br/>
                                <MudText Align="Align.Left"><b>@Price</b>: @product.Price</MudText>
                                <MudText Style="overflow-wrap:break-word;max-width:200px;" Typo="Typo.h6" Align="Align.Center">@productName</MudText>
                            </MudPaper>
                        </MudLink>
                    }
                }
            }
        </MudCard>
    </MudCard>

</div>
}

@code {
    [Parameter]
    public string categoryId { get; set; }
    private bool isLoading;
    private CategoryModelDto category;
    private string culture;
    private List<CategoryProductModelDto> products;
    IEnumerable<CategoryProductModelDto> productsLength1_6;
    IEnumerable<CategoryProductModelDto> productsLength2;
    private string Price;
    private string LengthText;
    private string Meters;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            await LoadData();
            isLoading = false;
            StateHasChanged(); // Trigger a re-render
        }

    }

    private async Task LoadData()
    {
        culture = await JSRuntime.InvokeAsync<string>("getLanguage");
        category = await categoryManager.GetCategoryById(categoryId);
        products = await categoryProduct.GetProductsByCategoryId(categoryId);
        productsLength1_6 = products.Where(p => p.Lenght == 1.6f).ToList();
        productsLength2 = products.Where(p => p.Lenght == 2f).ToList();

        Price = culture switch
        {
            "ro-RO" => "Preț",
            "ru-RU" => "Цена",
            "en-US" => "Price",
        };

        LengthText = culture switch
        {
            "ro-RO" => "Lungimea",
            "ru-RU" => "Длина",
            "en-US" => "Length",
        };

        Meters = culture switch
        {
            "ro-RO" => "Metri",
            "ru-RU" => "Метров",
            "en-US" => "Meters",
        };
    }
}