@page "/catalog"
@page "/catalog/{CategoryId}"
@using System.Globalization
@using WoodArtCons.Interfaces
@using WoodArtCons.Shared.DataTransferObjects
@inject IJSRuntime jSRuntime
@inject NavigationManager NavigationManager
@inject ICategoryManagerService categoryManager
@inject ICategoryProductManagerService categoryProduct
@rendermode InteractiveServer

<PageTitle>WoodArtCons - Catalog</PageTitle>

@if (!isLoading && culture != null)
{
    var catalogTitle = culture switch { "ru-RU" => "Каталог", "en-US" => "Catalog", "ro-RO" => "Catalog", _ => "Catalog" };
    var productCategories = culture switch { "ru-RU" => "Категории продуктов", "en-US" => "Product Categories", "ro-RO" => "Categorii de produse", _ => "Categorii de produse" };
    var home = culture switch { "ru-RU" => "Главная", "en-US" => "Home", "ro-RO" => "Acasă", _ => "Acasă" };
    var viewProducts = culture switch { "ru-RU" => "Посмотреть продукты", "en-US" => "View Products", "ro-RO" => "Vezi produsele", _ => "Vezi produsele" };
    var noProducts = culture switch { "ru-RU" => "В этой категории пока нет продуктов.", "en-US" => "No products in this category yet.", "ro-RO" => "Nu există încă produse în această categorie.", _ => "Nu există încă produse în această categorie." };

    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
        <MudBreadcrumbs Items="@_breadcrumbs" Class="mb-6"></MudBreadcrumbs>

        @if (string.IsNullOrEmpty(CategoryId))
        {
            <MudText Typo="Typo.h4" Class="mb-6" Style="font-weight: 600; color: #1f2937;">@productCategories</MudText>

            <MudGrid>
                @foreach (var category in categories)
                {
                    @if (!category.IsForGalery)
                    {
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudCard Elevation="3" Class="h-100 hover-card" Style="border-radius: 12px; overflow: hidden; cursor: pointer;" @onclick="@(() => NavigationManager.NavigateTo($"/catalog/{category.Id}"))">
                                <MudCardMedia Image="@category.ImageSrc" Height="200" />
                                <MudCardContent Class="pa-4 text-center">
                                    <MudText Typo="Typo.h6" Style="font-weight: 600;">@GetCategoryName(category, culture)</MudText>
                                </MudCardContent>
                                <MudCardActions Class="pa-4 pt-0">
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               FullWidth="true"
                                               StartIcon="@Icons.Material.Filled.ArrowForward"
                                               @onclick="@(() => NavigationManager.NavigateTo($"/catalog/{category.Id}"))">
                                        @viewProducts
                                    </MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                }
            </MudGrid>
        }
        else
        {
            <!-- Products View -->
            <MudText Typo="Typo.h4" Class="mb-6" Style="font-weight: 600; color: #1f2937;">@GetCurrentCategoryName()</MudText>

            @if (categoryProducts != null && categoryProducts.Any())
            {
                <MudGrid>
                    @foreach (var product in categoryProducts)
                    {
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudCard Elevation="3" Class="h-100 hover-card" Style="border-radius: 12px; overflow: hidden; cursor: pointer;" @onclick="@(() => NavigationManager.NavigateTo($"/catalog/{CategoryId}/{product.Id}"))">
                                <MudCardMedia Image="@(product.ImageSrc ?? "Images/placeholder.jpg")" Height="200" />
                                <MudCardContent Class="pa-4">
                                    <MudText Typo="Typo.h6" Style="font-weight: 600;">@GetProductName(product, culture)</MudText>
                                    <MudText Typo="Typo.body1" Color="Color.Primary" Style="font-weight: 600; margin-top: 8px !important;">@product.Price MDL</MudText>
                                </MudCardContent>
                                <MudCardActions Class="pa-4 pt-0">
                                    <MudButton Variant="Variant.Text"
                                               Color="Color.Primary"
                                               FullWidth="true"
                                               @onclick="@(() => NavigationManager.NavigateTo($"/catalog/{CategoryId}/{product.Id}"))">
                                        @(culture switch { "ru-RU" => "Подробнее", "en-US" => "View Details", "ro-RO" => "Vezi detalii", _ => "Vezi detalii" })
                                    </MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            }
            else
            {
                <MudAlert Severity="Severity.Info" Class="mt-4">
                    @noProducts
                </MudAlert>
            }
        }
    </MudContainer>
}

@code {
    [Parameter]
    public string CategoryId { get; set; }
    private List<CategoryModelDto>? categories;
    private List<CategoryProductModelDto>? categoryProducts;
    private bool isLoading = true;
    private string culture;
    private List<BreadcrumbItem> _breadcrumbs = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            await LoadData();
            UpdateBreadcrumbs();
            isLoading = false;
            StateHasChanged();
        }
        UpdateBreadcrumbs();
    }

    private async Task LoadData()
    {
        culture = await jSRuntime.InvokeAsync<string>("getLanguage");
        if (string.IsNullOrEmpty(culture))
        {
            culture = "ro-RO";
        }

        categories = await categoryManager.GetAllCategories();

        if (!string.IsNullOrEmpty(CategoryId))
        {
            categoryProducts = await categoryProduct.GetProductsByCategoryId(CategoryId);
        }

        UpdateBreadcrumbs();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!isLoading && categories != null)
        {
            if (!string.IsNullOrEmpty(CategoryId))
            {
                categoryProducts = await categoryProduct.GetProductsByCategoryId(CategoryId);
            }
            else
            {
                categoryProducts = null;
            }

            UpdateBreadcrumbs();
            StateHasChanged();
        }
    }

    private void UpdateBreadcrumbs()
    {
        if (string.IsNullOrEmpty(culture) || categories == null)
            return;

        var home = culture switch { "ru-RU" => "Главная", "en-US" => "Home", "ro-RO" => "Acasă", _ => "Acasă" };
        var catalog = culture switch { "ru-RU" => "Каталог", "en-US" => "Catalog", "ro-RO" => "Catalog", _ => "Catalog" };

        _breadcrumbs.Clear();
        _breadcrumbs.Add(new BreadcrumbItem(home, href: "/"));
        _breadcrumbs.Add(new BreadcrumbItem(catalog, href: "/catalog"));

        if (!string.IsNullOrEmpty(CategoryId))
        {
            var category = categories.FirstOrDefault(c => c.Id == CategoryId);
            if (category != null)
            {
                var categoryName = GetCategoryName(category, culture);
                _breadcrumbs.Add(new BreadcrumbItem(categoryName, href: null));
            }
        }
    }

    private string GetCurrentCategoryName()
    {
        var category = categories.FirstOrDefault(c => c.Id == CategoryId);
        if (category == null) return "";

        return GetCategoryName(category, culture);
    }

    private string GetCategoryName(dynamic category, string currentCulture)
    {
        return currentCulture switch
        {
            "ru-RU" => category.NameRu,
            "en-US" => category.NameEn,
            "ro-RO" => category.NameRo,
        };
    }

    private string GetProductName(CategoryProductModelDto product, string currentCulture)
    {
        return currentCulture switch
        {
            "ru-RU" => product.NameRu,
            "en-US" => product.NameEn,
            "ro-RO" => product.NameRo,
        };
    }
}
