@using System.Globalization
@using WoodArtCons.Components.Layout
@inject IJSRuntime _JSRuntime
@inject NavigationManager NavigationManager

<!DOCTYPE html>
<html lang="en">

<head>
    <title>WoodArtCons</title>
    <meta name="description" content="Wood Art Cons Acoperiș Foisor Terasa." />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" href="app.css" />
    <link rel="icon" type="image/png" href="/Images/WoodArtCons_Logo.png" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <link href="customPageStyles.css" rel="stylesheet" />
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
    <style>
        .custom-mud-menu-button .mud-button {
            width: 120px !important;
        }

        .custom-mud-item .mud-paper {
            height: 35vh;
        }

        .custom-image-size{
            max-height: 28vh;
        }     
        .text-white {
            color: white !important;
            text-decoration: none;
        }
        .mr-3 { margin-right: 1rem; }
        .mr-4 { margin-right: 1.5rem; }   
        .pt-content-offset {
            padding-top: 121px; /* ex: 40px topbar + 56px MudAppBar */
        }
        .appbar-below-topbar {
            top: 37px !important; /* exact cât are topbar-ul */
            z-index: 1090;
        }
        .topbar-sticky {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 40px; /* sau cât are înălțime */
            background-color: #553214;
            color: white;
            z-index: 1100;
            display: flex;
            align-items: center;
            padding: 0 1rem;
        }     
        .topbar-sticky .fab {
            font-size: 1.7rem !important;
        }
        .topbar-sticky a[href^="mailto"] {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            vertical-align: middle;
        }                
    </style>
    <HeadOutlet />
</head>

<body>

     <Routes /> 

    <script src="_framework/blazor.server.js"></script>
    <script src="Functions/GetCookie.js"></script>
    <script>
        function setLanguage(cultureCode) {
            localStorage.setItem('preferredLanguage', cultureCode);
            console.log(`Language set to: ${cultureCode}`);
        }

        function getLanguage() {
            const language = localStorage.getItem('preferredLanguage');
            return language;
        }

        function setToken(token) {
            var name = "token";
            var days = 7;
            var date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            var expires = "; expires=" + date.toUTCString();
            document.cookie = name + "=" + (token || "") + expires + "; path=/";
        }

        function getToken() {
            var name = "token";
            var value = "; " + document.cookie;
            var parts = value.split("; " + name + "=");
            if (parts.length === 2) return parts.pop().split(";").shift();
        }

        function removeTokenFromCookie() {
            var name = "token";
            document.cookie = '';
            document.cookie = name + '=' + '' + '; expires=' + '' + '; path=/;';
        };

        function downloadFile(filePath, fileName) {
            const link = document.createElement('a');
            link.href = filePath;
            link.download = fileName;
            link.click();
        }

    </script>
</body>
</html>

@code {
    private bool isloading;
    private string culture;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isloading = true;
            culture = await _JSRuntime.InvokeAsync<string>("getLanguage");
            isloading = false;
            StateHasChanged();
        }
    }
}