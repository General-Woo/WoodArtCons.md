@using System.Globalization
@inject NavigationManager _navigationManager 
@inject IJSRuntime jSRuntime
@implements IDisposable


@if (!isloading && culture != null)
{
    var homePageTitle = culture switch { "ru-RU" => "Главная", "en-US" => "Home", "ro-RO" => "Acasă" };
    var catalogPageTitle = culture switch { "ru-RU" => "Каталог", "en-US" => "Catalog", "ro-RO" => "Catalog" };
    var galeryPageTitle = culture switch { "ru-RU" => "Галерея", "en-US" => "Gallery", "ro-RO" => "Galerie" };
    var aboutPageTitle = culture switch { "ru-RU" => "О нас", "en-US" => "About Us", "ro-RO" => "Despre noi" };
    var contactsPageTitle = culture switch { "ru-RU" => "Контакты", "en-US" => "Contacts", "ro-RO" => "Contacte" };
    var admin = culture switch { "ru-RU" => "Админ", "en-US" => "Admin", "ro-RO" => "Admin" };

    <div class="d-flex align-center">
        <AuthorizeView>
            <Authorized>
                <MudButton Href="/admin">@admin</MudButton>
            </Authorized>
        </AuthorizeView>

        <MudButton Href="/"
                   Variant="Variant.Text" 
                  Color="@GetActiveColor("")"
                  Class="mx-1 nav-button">
            @homePageTitle
        </MudButton>
        
        <MudButton Href="/catalog" 
                  Variant="Variant.Text" 
                  Color="@GetActiveColor("catalog")"
                  Class="mx-1 nav-button">
            @catalogPageTitle
        </MudButton>

        <MudButton Href="/gallery"
                   Variant="Variant.Text" 
                  Color="@GetActiveColor("gallery")"
                  Class="mx-1 nav-button">
            @galeryPageTitle
        </MudButton>

        <MudButton Href="/about"
                   Variant="Variant.Text" 
                  Color="@GetActiveColor("about")"
                  Class="mx-1 nav-button">
            @aboutPageTitle
        </MudButton>

        <MudButton Href="/contacts"
                   Variant="Variant.Text" 
                  Color="@GetActiveColor("contacts")"
                  Class="mx-1 nav-button">
            @contactsPageTitle
        </MudButton>
    </div>
}
else
{
    <div class="d-flex align-center">
        <MudSkeleton Width="60px" Height="40px" Class="mx-1" />
        <MudSkeleton Width="80px" Height="40px" Class="mx-1" />
        <MudSkeleton Width="70px" Height="40px" Class="mx-1" />
        <MudSkeleton Width="90px" Height="40px" Class="mx-1" />
        <MudSkeleton Width="80px" Height="40px" Class="mx-1" />
    </div>
}

@code {
    private bool isloading = true;
    private string culture;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _navigationManager.LocationChanged += OnLocationChanged;

        if (firstRender)
        {
            culture = await jSRuntime.InvokeAsync<string>("getLanguage");
            if (string.IsNullOrEmpty(culture))
            {
                culture = "ro-RO";
            }
            isloading = false;
            StateHasChanged();
        }
    }

    private Color GetActiveColor(string route)
    {
        var currentUri = _navigationManager.Uri.ToLower();
        
        // Special handling for home route
        if (string.IsNullOrEmpty(route))
        {
            // Extract the path from the URI
            var uri = new Uri(currentUri);
            var path = uri.AbsolutePath.ToLower();
            
            // Home is active if path is "/", "/home", or empty
            if (path == "/" || path == "/home" || string.IsNullOrEmpty(path))
            {
                return Color.Primary;
            }
            return Color.Inherit;
        }
        
        // For other routes, check if the current URI contains the route
        if (currentUri.Contains(route))
        {
            return Color.Primary;
        }
        
        return Color.Inherit;
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        StateHasChanged();
    }


    public void Dispose()
    {
        _navigationManager.LocationChanged -= OnLocationChanged;
    }
}
